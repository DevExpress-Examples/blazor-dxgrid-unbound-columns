@page "/"

@using BlazorGridUnboundColumns.Data
@inject WeatherForecastService ForecastService

<DxGrid Data="@forecasts"
        UnboundColumnData="Grid_CustomUnboundColumnData"
        CustomizeEditModel="Grid_CustomizeEditModel"
        EditModelSaving="Grid_EditModelSaving">
    <Columns>
        <DxGridCommandColumn NewButtonVisible="false" 
                             DeleteButtonVisible="false"
                             Width="10%" />
        <DxGridDataColumn Caption="Date" FieldName="Date" />
        <DxGridDataColumn FieldName="TemperatureF"
                          Caption="@("Temperature (\x2109)")"
                          UnboundType="GridUnboundColumnType.Decimal"
                          UnboundExpression="32 + [TemperatureC] / 0.5556" />
        <DxGridDataColumn FieldName="Summary"
                          UnboundType="GridUnboundColumnType.String" />
    </Columns>
    <EditFormTemplate Context="editFormContext">
        @{
            var forecast = (EditableWeatherForecast)editFormContext.EditModel;
        }
        <DxFormLayout>
            <DxFormLayoutItem Caption="Date:">
                @editFormContext.GetEditor("Date")
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Temperature">
                <DxSpinEdit @bind-Value="forecast.TemperatureF" Mask="f1" />
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync() {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    void Grid_CustomUnboundColumnData(GridUnboundColumnDataEventArgs e) {
        if (e.FieldName == "Summary") {
            int temperature = Convert.ToInt32(e.GetRowValue("TemperatureC"));
            e.Value = GetTemperatureString(temperature);
        }
    }

    string GetTemperatureString(int value) {
        if (value < -10)
            return "Cool";
        if (value >= -10 && value < 5)
            return "Chilly";
        if (value >= 5 && value < 15)
            return "Warm";
        if (value >= 15)
            return "Hot";
        return null;
    }

    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e) {
        var dataItem = (WeatherForecast)e.DataItem;
        e.EditModel = new EditableWeatherForecast {
            Date = dataItem.Date,
            TemperatureC = dataItem.TemperatureC
        };
    }

    void Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
        var editModel = (EditableWeatherForecast)e.EditModel;
        var dataItem = (WeatherForecast)e.DataItem;
        if (dataItem != null) {
            dataItem.Date = editModel.Date;
            dataItem.TemperatureC = editModel.TemperatureC;
        }
    }
}
